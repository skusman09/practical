#################   Matrix operations  #####################
import numpy as np
print("***Matrix operations***")
line = "--------"
a = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a)
print(line)
b = np.ones((3,3))
print(b)
print(line)
m_add = np.add(a,b)
print(m_add)
print(line)
m_subt = np.subtract(a,b)
print(m_subt)
print(line)
m_multi = np.multiply(a,b)
print(m_multi)
print(line)
m_div = np.divide(a,b)
print(m_div)
print(line)
m_dot = np.dot(a,b)
print(m_dot)

##################   Tensorflow operations ##########################
import tensorflow as tf
print("***Tensorflow operations***")
line = "--------"
m = tf.constant([[1,2,3],[4,5,6],[7,8,9]],shape=(3,3))
print(m)
print(line)
n = tf.constant([[10,20,30],[40,50,60],[7,80,90]],shape=(3,3))
print(n)
print(line)
tf_add = tf.add(m,n)
print(tf_add)
print(line)
tf_multi = tf.multiply(m,n)
print(tf_multi)
print(line)
tf_matmul = tf.matmul(m,n)
print(tf_matmul)
print(line)
tf_subt = tf.subtract(m,n)
print(tf_subt)
print(line)
tf_div = tf.divide(m,n)
print(tf_div)
print(line)
#reduce_max()
x = tf.constant([[1,2],[3,4]])
print(x)
print(line)
max_val = tf.reduce_max(x)
print(max_val)
print(line)
max_val_row = tf.reduce_max(x,axis=0)
print(max_val_row)
print(line)
max_val_col = tf.reduce_max(x,axis=1)
print(max_val_col)
print(line)
#Retaining reduced dimensions
max_with_keepdims = tf.reduce_max(x, axis=1, keepdims=True)
print(max_with_keepdims)
print(line)
#Maximum value in 1-D array
x1D = tf.constant([1,2,3])
max_index_1d = tf.math.argmax(x1D)
print(max_index_1d.numpy())
print(line)
x2D = tf.constant([[1,2,3],[2,1,4]])
max_index_2d_row = tf.math.argmax(x2D,axis=0)
print(max_index_2d_row.numpy())
print(line)
max_index_2d_col = tf.math.argmax(x2D,axis=1)
print(max_index_2d_col.numpy())
print(line)
tf_ones = tf.ones((3,3))
print(tf_ones)
print(line)
tf_softmax=tf.nn.softmax(tf_ones)
print(tf_softmax)
print(line)
tf_zeros = tf.zeros((3,3))
print(tf_zeros)
print(line)
x_reshape = tf.reshape(x,[4,1])
print(x_reshape)
print(line)
#range()
gen_using_range = tf.range(0,25,2)
print(gen_using_range)