// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StructDemo {

    struct Person {
        string name;
        uint age;
        address walletAddress;
    }

    Person[] public persons;
    mapping(address => Person) public personByAddress;

    function addPerson(string memory _name, uint _age) public {
        Person memory newPerson = Person(_name, _age, msg.sender);
        persons.push(newPerson);
        personByAddress[msg.sender] = newPerson;
    }

    function getPerson(address _walletAddress) public view returns (string memory, uint, address) {
        Person memory person = personByAddress[_walletAddress];
        return (person.name, person.age, person.walletAddress);
    }
}










############
pragma solidity ^0.8.0;

contract TypeConversions {

function convertInt(uint8 smallNumber) public pure returns (uint256, uint8) {

uint256 bigNumber = uint256(smallNumber);

uint8 backToSmall = uint8(bigNumber); ww

return (bigNumber, backToSmall); ww

}

function convertAddress (address addr) public pure returns (uint160, address) {

uint160 numericAddress = uint160(addr);

address backToAddress = address (numericAddress);

return (numericAddress, backToAddress);

}

function convertBytesToString(bytes32 data) public pure returns (string memory) { return string(abi.encodePacked(data));

}

function convertUintToBytes(uint256 number) public pure returns (bytes32) { return bytes32(number); }

function convertBytes ToUint(bytes32 data) public pure returns (uint256) { return uint256(data);

}

}|